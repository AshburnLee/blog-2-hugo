<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jetson on Junhui&#39;s Journal 2</title>
    <link>https://ashburnLee.github.io/blog-2-hugo/jetson/</link>
    <description>Recent content in Jetson on Junhui&#39;s Journal 2</description>
    <generator>Hugo -- 0.149.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Aug 2025 12:47:02 +0800</lastBuildDate>
    <atom:link href="https://ashburnLee.github.io/blog-2-hugo/jetson/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jetson Setup</title>
      <link>https://ashburnLee.github.io/blog-2-hugo/jetson/jetson-setup/</link>
      <pubDate>Sun, 31 Aug 2025 12:47:02 +0800</pubDate>
      <guid>https://ashburnLee.github.io/blog-2-hugo/jetson/jetson-setup/</guid>
      <description>&lt;p&gt;NVIDIA Orin 是一款专为&lt;strong&gt;自动驾驶汽车&lt;/strong&gt;和&lt;strong&gt;机器人&lt;/strong&gt;设计的高性能系统级芯片，包含新一代 Ampere GPU 架构和 Arm Hercules CPU 内核，以及深度学习加速器和计算机视觉加速器。&lt;/p&gt;
&lt;p&gt;应用领域：Orin 芯片不仅适用于自动驾驶汽车，还广泛应用于机器人、工业边缘计算等领域。&lt;/p&gt;
&lt;p&gt;支持C/C++, python, cuda, pytorch, ROS (Robot Operating System), JetPack SDK, DeepStream, VScode&lt;/p&gt;
&lt;p&gt;TensorRT 是 NVIDIA 开发的一个高性能深度学习推理 SDK。它不是完全开源的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linux for Tegra (L4T) &lt;/code&gt;是 NVIDIA 为其 Tegra 系列系统芯片 (SoC) 开发的嵌入式 Linux 发行版。它主要用于 NVIDIA Jetson 系列开发套件等嵌入式系统。L4T 提供了运行在 Tegra SoC 上的内核、驱动程序、库和工具，支持各种应用，包括机器人、人工智能、自动驾驶和媒体处理等。 它包含了 NVIDIA 专有的驱动程序，以充分利用 Tegra SoC 的硬件加速功能。不同的 L4T 版本支持不同的 Tegra 系列芯片和功能。 例如，较新的版本可能支持 Vulkan 和更新的 CUDA 版本。 开发者可以使用 L4T 来构建和部署各种嵌入式应用。&lt;/p&gt;
&lt;h1 id=&#34;配置jetson-orin-nano&#34;&gt;配置Jetson Orin Nano&lt;/h1&gt;
&lt;h2 id=&#34;记录命令&#34;&gt;记录命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linux ip: &amp;lt;linux-ip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uname: junhui
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install python3-pip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pip3 install -U jetson-stats
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo jtop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo poweroff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl status bluetooth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start bluetooth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iwconfig  &lt;span style=&#34;color:#75715e&#34;&gt;# 看网速等网络状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;install-jetpack&#34;&gt;install Jetpack&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 找不到 nvcc 编译器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install nvidia-jetpack  &lt;span style=&#34;color:#75715e&#34;&gt;# 8GB 内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find / -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nvcc&amp;#34;&lt;/span&gt; 2&amp;gt;/dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export CUDA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/cuda-12.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$CUDA_HOME/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$LD_LIBRARY_PATH:$CUDA_HOME/lib64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 找到 sample code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find / -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vectorAdd.cu&amp;#34;&lt;/span&gt; 2&amp;gt;/dev/null 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash /usr/local/cuda-11.4/bin/cuda-install-samples-11.4.sh ./  &lt;span style=&#34;color:#75715e&#34;&gt;#拷贝 samples 到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 验证：(默认找不到头文件，只能指明-I)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvcc $CUDA_HOME/samples/0_Simple/vectorAdd/vectorAdd.cu -I/usr/local/cuda-11.4/samples/common/inc/ -o vectorAdd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvcc vectorAdd.cu -I/home/junhui/workspace/NVIDIA_CUDA-11.4_Samples/common/inc/ -o vectorAdd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvcc deviceQuery.cpp -I/home/junhui/workspace/NVIDIA_CUDA-11.4_Samples/common/inc -o deviceQuery
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 检查&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dpkg -l | grep nvidia  &lt;span style=&#34;color:#75715e&#34;&gt;#这个命令会列出所有安装的与 &amp;#34;nvidia&amp;#34; 相关的软件包。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dpkg -l | grep nvidia 获取一个大致的组件列表，然后使用 apt-cache show 命令查看特定组件的详细信息
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;主机连接-orin-最佳实践&#34;&gt;主机连接 Orin 最佳实践&lt;/h1&gt;
&lt;p&gt;假如没有外接显示器和鼠标键盘。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jetson Ncu 解读</title>
      <link>https://ashburnLee.github.io/blog-2-hugo/jetson/jetson-ncu-%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Sun, 31 Aug 2025 12:47:01 +0800</pubDate>
      <guid>https://ashburnLee.github.io/blog-2-hugo/jetson/jetson-ncu-%E8%A7%A3%E8%AF%BB/</guid>
      <description>&lt;h2 id=&#34;常用命令&#34;&gt;常用命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;launch-and-attach：启动程序并附加分析。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--kernel &amp;lt;kernel_name&amp;gt;：指定要分析的 CUDA 内核（可选，正则表达式匹配）。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--set &amp;lt;set_name&amp;gt;：指定指标集（例如，full、detailed 或自定义集）。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - full: 收集所有可用指标，适合全面分析，但耗时较长。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - detailed: 收集详细指标，覆盖计算、内存、调度等，适合深入优化。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - speed-of-light: 聚焦高层次吞吐量指标（如你的 Speed Of Light Throughput 报告）。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - occupancy: 聚焦占用率指标（如你的 Occupancy 报告）。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - scheduler: 分析线程束调度状态。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - memory: 分析内存访问和缓存性能。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--metric dram__cycles_active.avg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which ncu&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; --query-metrics  &lt;span style=&#34;color:#75715e&#34;&gt;# 输出所有支持的指标和描述&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which ncu&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; --mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;launch-and-attach --kernel-name ComputeLogSoftmaxForwardInWarp --metric sm__warps_launched ./obj/softmax
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -f ./ncu/softmax-last.ncu-rep &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which ncu&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; --mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;launch-and-attach  -o ./ncu/softmax-last.ncu-rep ./obj/softmax &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;which ncu&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; --import ./ncu/softmax-last.ncu-rep &amp;gt; ./ncu/softmax-last.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ncu--o-softmax-lastncu-rep-softmax&#34;&gt;ncu -o ./softmax-last.ncu-rep ./softmax&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  void ComputeLogSoftmaxForwardInWarp&amp;lt;float, float, 4&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T1 *, const T1 *, int, int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1024, 1, 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4, 32, 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, Context 1, Stream 7, Device 0, CC 8.7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Section: GPU Speed Of Light Throughput
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ----------------------- ----------- ------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Metric Name             Metric Unit Metric Value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ----------------------- ----------- ------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SM Frequency                    Mhz       305.41  &lt;span style=&#34;color:#75715e&#34;&gt;# SM的运行频率：表示处于低功耗模式或未满载运行，由于散热或功耗限制）导致频率降低，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Elapsed Cycles                cycle       32,515  &lt;span style=&#34;color:#75715e&#34;&gt;# kernel 执行的总时钟周期数：越小越好，如果过高，优化 kernel 以减少指令数或提高并行性。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Memory Throughput                 %        27.33  &lt;span style=&#34;color:#75715e&#34;&gt;# 内存带宽利用率：内存访问的效率 / 硬件峰值。27.33% 远低于 60% 的推荐阈值，表明内存带宽利用率非常低。检查内存访问模式（使用 NCU 的内存统计部分，查看 Global Memory 访问的合并程度）。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Duration                         us       106.46  &lt;span style=&#34;color:#75715e&#34;&gt;# kernel 执行的总时间（微秒）： 32,515 cycles ÷ 305.41 MHz&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L1/TEX Cache Throughput           %        29.40  &lt;span style=&#34;color:#75715e&#34;&gt;# L1 缓存和纹理缓存的带宽利用率：低于 60%，即缓存利用率低。数据访问模式不佳，未充分利用 L1 缓存。缓存命中率低（需要检查 NCU 的缓存命中率统计）。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L2 Cache Throughput               %        22.36  &lt;span style=&#34;color:#75715e&#34;&gt;# 远低于预期，表明 L2 缓存未被有效利用。检查 L2 缓存的命中率（NCU 的缓存统计部分）。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SM Active Cycles              cycle    28,654.75  &lt;span style=&#34;color:#75715e&#34;&gt;# SM 在执行计算任务时的活跃周期数：活跃周期占总周期的比例为 28,654.75 ÷ 32,515 ≈ 88.1% 挺好，但是。查看 NCU 的 Scheduler Statistics，检查线程束调度效率。否存在指令依赖或分支发散。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Compute &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SM&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Throughput           %        57.48  &lt;span style=&#34;color:#75715e&#34;&gt;# SM 的计算吞吐量：57.48% 低于 60%，计算资源未被充分利用。可能线程块（Block）或网格（Grid）配置不足，导致 SM 未满载。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ----------------------- ----------- ------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## 优化建议：低计算吞吐量 (57.48%) 和低内存带宽利用率 (27.33%): 表明内核未充分利用 GPU 的计算和内存资源。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## 延迟问题 (Latency Issues): 低吞吐量通常由以下原因导致。内存访问延迟（例如，非合并内存访问或缓存未命中）。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## 建议分析方向：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OPT   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          latency issues. Look at Scheduler Statistics and Warp State Statistics &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; potential reasons.                 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## fp32 的峰值性能是fp64的64倍，但是fp32 的吞吐只有16%，说明内核并未充分利用GPU的计算资源。与上述SM 吞吐 只有57.48% 一致 **&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Section: GPU Speed Of Light Roofline Chart
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    INF The ratio of peak float fp32 to double fp64 performance on this device is 64:1. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          The kernel achieved 16% of this device&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s fp32 peak performance and 0% of its fp64 peak performance. 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结论：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jetson Orin Chip</title>
      <link>https://ashburnLee.github.io/blog-2-hugo/jetson/jetson-orin-chip/</link>
      <pubDate>Sun, 31 Aug 2025 12:47:01 +0800</pubDate>
      <guid>https://ashburnLee.github.io/blog-2-hugo/jetson/jetson-orin-chip/</guid>
      <description>&lt;p&gt;NVIDIA Jetson Orin Nano 4GB版本的芯片使用的是NVIDIA Ampere架构，配备512个CUDA核心和16个Tensor Cores。具体的芯片型号是 GA10B&lt;/p&gt;
&lt;h1 id=&#34;jetson-orin-nano-4gb&#34;&gt;Jetson Orin Nano 4GB&lt;/h1&gt;
&lt;p&gt;GPU name: GA10B&lt;/p&gt;
&lt;p&gt;Architechture: NVIDIA Ampere&lt;/p&gt;
&lt;p&gt;算力：34 TOPS&lt;/p&gt;
&lt;p&gt;GPU：NVIDIA Ampere architecture&lt;/p&gt;
&lt;p&gt;SM 个数：4&lt;/p&gt;
&lt;p&gt;Tensor cores/SM：4&lt;/p&gt;
&lt;p&gt;CUDA core/SM：128&lt;/p&gt;
&lt;p&gt;总 Tensor Cores：16&lt;/p&gt;
&lt;p&gt;总 CUDA core：512&lt;/p&gt;
&lt;p&gt;GPU 最大频率：1020MHz&lt;/p&gt;
&lt;p&gt;CPU：6-core Arm® Cortex®-A78AE v8.2 64-bit CPU 1.5MB L2 + 4MB L3&lt;/p&gt;
&lt;p&gt;CPU 最大频率：1.7 GHz&lt;/p&gt;
&lt;p&gt;内存：4GB 64-bit LPDDR5 51 GB/s&lt;/p&gt;
&lt;p&gt;功耗：7W - 10W - 25W&lt;/p&gt;
&lt;p&gt;吞吐：512 * 611.35 * 1000000 * 10^9 * 2(flops) = 34 TOPS&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
