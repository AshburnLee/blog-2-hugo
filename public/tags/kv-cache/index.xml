<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kv-Cache on Junhui&#39;s Journal 2</title>
    <link>https://ashburnLee.github.io/blog-2-hugo/tags/kv-cache/</link>
    <description>Recent content in Kv-Cache on Junhui&#39;s Journal 2</description>
    <generator>Hugo -- 0.149.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Aug 2025 12:49:39 +0800</lastBuildDate>
    <atom:link href="https://ashburnLee.github.io/blog-2-hugo/tags/kv-cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5.10 Llama.cpp Attention kv Cache</title>
      <link>https://ashburnLee.github.io/blog-2-hugo/llm/5.10-llama.cpp-attention-kv-cache/</link>
      <pubDate>Sun, 31 Aug 2025 12:49:39 +0800</pubDate>
      <guid>https://ashburnLee.github.io/blog-2-hugo/llm/5.10-llama.cpp-attention-kv-cache/</guid>
      <description>&lt;p&gt;Transformer 的注意力机制 Attention 是核心组件，用于捕捉输入&lt;strong&gt;序列中 token 之间的关系&lt;/strong&gt;，这个&lt;strong&gt;关系是通过 Q、K、V 结构建模&lt;/strong&gt;的, QKV 是 Attention 的&lt;strong&gt;核心矩阵&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;KV-cache 是 Transformer 模型推理中的关键&lt;strong&gt;优化技术&lt;/strong&gt;，用于存储注意力机制 Attention 中的键 Key 和值 Value 张量，以加速自回归生成&lt;/p&gt;
&lt;p&gt;在自回归生成中，每个新 token 的生成需要计算当前 token 的 Query (Q) 与之前所有 token 的 Key 和 Value 进行注意力计算。KV-cache 保存之前的 K 和 V，避免重复计算&lt;/p&gt;
&lt;p&gt;KV-cache 占用额外内存，但它避免重复计算整个序列的 K 和 V，整体效率更高&lt;/p&gt;
&lt;h2 id=&#34;transformer-中的-attention&#34;&gt;Transformer 中的 Attention&lt;/h2&gt;
&lt;p&gt;绝大多数 LLM（如 Qwen3、LLaMA、GPT）使用 Scaled Dot-Product Attention 或其变体（比如 GQA），&lt;strong&gt;Attention 都是 Q、K、V 的函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q（Query）：当前 token 的查询向量。&lt;/li&gt;
&lt;li&gt;K（Key）：所有 token 的键向量。&lt;/li&gt;
&lt;li&gt;V（Value）：所有 token 的值向量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自回归生成：每个新 token 的 Q 需要与之前所有 token 的 K 和 V 计算注意力&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
